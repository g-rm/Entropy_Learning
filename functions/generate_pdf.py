import numpy as np
import pandas as pd

def generate_pdf(data, range, step):

    """
    Generates a probability density function
    given samples and a step size.
    Too big step sizes will make the pdf imprecise,
    but too small sizes will have much noise.

    Parameters
    ----------
    data : array
		Value of each observation

    range : tuple (min, max)
        the range of support for the pdf

    step : float
		Precision of analisis (delta x)

    Returns
    -------
    density : array
        Value of the probability density along intervals

    bin_edges : arrays
        The infimum and supremum values of intervals
    """

    nbins = int((range[1] - range[0])/step) + 1
    new_range = (range[0], range[0]+nbins*step)
    density, bin_edges = np.histogram(data, nbins, new_range, density=True)

    return density, bin_edges

def calculate_cs_us(df_orig, trial_cp=None):
    """
    Calculates CS~US and US~US times for a given DataFrame
    of n-rats.

    Parameters
    ----------
    df_orig : DataFrame
        DataFrame generated by function matrix_to_df or similar

    trial_cp : int
        Supremum range value: CS and US will be calculated
        from session's start until this trial.
        *Default 'None' uses all array; not a range/slice of it.

    Returns
    -------
    CS : array-like
        Time 't' between CS~US of each trial

    US : array-like
        Time 't' between US~US of reinforced trials
    """

    df = df_orig.copy()
    df['US_to_US_time'] = df[df.reinforced_trials]['trial_end'].diff()

    if trial_cp:
        US = df['US_to_US_time'][:trial_cp].dropna().values
        CS = df[df.reinforced_trials]['t'][:trial_cp].values
    else:
        US = df['US_to_US_time'].dropna().values
        CS = df[df.reinforced_trials]['t'].values

    return (CS, US)
